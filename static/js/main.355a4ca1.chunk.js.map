{"version":3,"sources":["redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store.js","redux/actions/index.js","pages/Login.js","components/Header.js","components/Table.js","components/WalletForm.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","user","state","action","type","window","Cypress","INITIAL_STATE1","currencies","expenses","wallet","loading","Object","keys","filter","key","payload","item","id","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","getCUYrrance","newAction","Login","senha","button","validation","ontext","bind","redirecionar","validatioEmail","prevProps","prevState","this","value","setState","target","name","test","length","props","history","push","className","placeholder","onChange","disabled","onClick","React","Component","connect","dispatch","Header","total","soma","forEach","element","currency","Number","exchangeRates","ask","toFixed","Table","remove","event","preventDefault","removerItem","map","description","tag","method","WalletForm","onForma","Onsubmit","fetchCurrance1","valor","e","fetchCURrancE2","prev","currenty","tudo","fetch","then","response","json","getcurrance","catch","error","failedRequest","request","data","Wallet","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.355a4ca1.chunk.js","sourcesContent":["const INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'FORMSUSER':\n    return {\n      ...state,\n      email: action.state.email,\n    };\n  default:\n    return state;\n  }\n}\n\nif (window.Cypress) {\n  window.user = user;\n}\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE1 = {\n  currencies: '',\n  expenses: [],\n};\n\nfunction wallet(state = INITIAL_STATE1, action) {\n  switch (action.type) {\n  case 'currance':\n    return {\n      ...state,\n      loading: action.state,\n      currencies: Object.keys(action.state).filter((key) => (key !== 'USDT')),\n    };\n  case 'gasto':\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n\n    };\n  case 'remove':\n    return {\n      ...state,\n      expenses: state.expenses.filter((item) => item.id !== action.state),\n    };\n  default:\n    return state;\n  }\n}\n\nif (window.Cypress) {\n  window.wallet = wallet;\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nif (window.Cypress) {\n  window.rootReducer = rootReducer;\n}\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","// Coloque aqui suas actions\nconst formuser = 'FORMSUSER';\nconst newAction = (state) => ({ type: formuser, state });\n\nconst getCurrance = 'currance';\nconst REQUEST_CURRANCE = 'REQUEST_CURRANCE';\nconst FAILED_REQUEST = 'FAILED_REQUEST';\n\nconst Getgasto = 'gasto';\n\nconst remover = 'remove';\n\nfunction getcurrance(json) {\n  return { type: getCurrance, state: json };\n}\n\nfunction requestcRURRANCE() {\n  return { type: REQUEST_CURRANCE };\n}\n\nfunction failedRequest(error) {\n  return { type: FAILED_REQUEST, state: error };\n}\n\nexport function getCUYrrance(payload) {\n  return { type: Getgasto, payload };\n}\n\nexport function fetchCurrance() {\n  return (dispatch) => {\n    dispatch(requestcRURRANCE());\n    return fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((json) => dispatch(getcurrance(json)))\n      .catch((error) => dispatch(failedRequest(error)));\n  };\n}\n\nexport function fetchCURrance3(payload) {\n  return async (dispatch) => {\n    const request = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await request.json();\n    payload.exchangeRates = data;\n    dispatch(getCUYrrance(payload));\n  };\n}\n\nexport function remov(state) {\n  return { type: remover, state };\n}\nexport default newAction;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport newAction from '../redux/actions/index';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      senha: '',\n      button: true,\n      email: '',\n      validation: false,\n    };\n    this.ontext = this.ontext.bind(this);\n    this.redirecionar = this.redirecionar.bind(this);\n    this.validatioEmail = this.validatioEmail.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { senha, email } = this.state;\n    if (prevState.senha !== senha) {\n      this.validatioEmail();\n    }\n    if (prevState.email !== email) {\n      this.validatioEmail();\n    }\n  }\n\n  ontext(value) {\n    this.setState({\n      [value.target.name]: value.target.value,\n    });\n    this.validatioEmail();\n  }\n\n  validatioEmail() {\n    const numer = 6;\n    const { email } = this.state;\n    const valid = /\\S+@\\S+\\.\\S+/;\n    this.setState({\n      validation: valid.test(email),\n    });\n    const { senha, validation } = this.state;\n    if (senha.length >= numer && validation === true) {\n      this.setState({\n        button: false,\n      });\n    }\n    if (senha.length < numer || validation === false) {\n      this.setState({\n        button: true,\n      });\n    }\n  }\n\n  redirecionar() {\n    const { history, user } = this.props;\n    user(this.state);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { button, senha, email } = this.state;\n\n    return (\n      <div className=\"container-login\">\n        <div className=\"login\">\n          <h1>Wallet</h1>\n          <input\n            type=\"text\"\n            placeholder=\"Email\"\n            data-testid=\"email-input\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.ontext }\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Senha\"\n            data-testid=\"password-input\"\n            onChange={ this.ontext }\n            value={ senha }\n            name=\"senha\"\n          />\n          <button\n            type=\"button\"\n            disabled={ button }\n            onClick={ this.redirecionar }\n            name=\"entrar\"\n          >\n            Entrar\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  user: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  user: (state) => dispatch(newAction(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends Component {\n  render() {\n    const { user, total } = this.props;\n    let soma = 0;\n    total.forEach((element) => {\n      const { currency } = element;\n      soma += Number(element.value) * element.exchangeRates[currency].ask;\n    });\n    return (\n      <header className=\"cabecalho\">\n        <h3 data-testid=\"email-field\">\n          {' '}\n          Email:\n          {' '}\n          { user}\n        </h3>\n        <div className=\"despeas\">\n          <h3 data-testid=\"total-field\">\n            {soma.toFixed(2)}\n          </h3>\n          <h3 data-testid=\"header-currency-field\">BRL </h3>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.email,\n  total: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  user: PropTypes.string.isRequired,\n  total: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { remov } from '../redux/actions/index';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.remove = this.remove.bind(this);\n  }\n\n  remove(event) {\n    event.preventDefault();\n    const { removerItem } = this.props;\n    const { name } = event.target;\n    removerItem(Number(name));\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div className=\"table-container\">\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {expenses.length === 0 ? <p> </p>\n              : expenses.map((element) => (\n                <tr key={ element.id }>\n                  <td>{ element.description }</td>\n                  <td>{element.tag }</td>\n                  <td>{ element.method }</td>\n                  <td>{ Number(element.value).toFixed(2)}</td>\n                  <td>{ element.exchangeRates[element.currency].name }</td>\n                  <td>\n                    {Number(element\n                      .exchangeRates[element.currency]\n                      .ask).toFixed(2)}\n\n                  </td>\n                  <td>\n                    {Number(element.exchangeRates[element.currency].ask\n                  * element.value).toFixed(2)}\n\n                  </td>\n                  <td>Real</td>\n                  <div>\n                    <td>\n                      <button\n                        data-testid=\"delete-btn\"\n                        type=\"button\"\n                        name={ element.id }\n                        onClick={ this.remove }\n                      >\n                        Excluir\n                      </button>\n                    </td>\n                  </div>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removerItem: (id) => dispatch(remov(id)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  removerItem: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCurrance, fetchCURrance3 } from '../redux/actions/index';\nimport Table from './Table';\n\nclass WalletForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'alimentação',\n    };\n    this.onForma = this.onForma.bind(this);\n    this.Onsubmit = this.Onsubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchCurrance1 } = this.props;\n    fetchCurrance1();\n  }\n\n  onForma(event) {\n    const { name, value: valor } = event.target;\n    this.setState({\n      [name]: valor,\n    });\n  }\n\n  Onsubmit(e) {\n    e.preventDefault();\n    const { fetchCURrancE2 } = this.props;\n    fetchCURrancE2(this.state);\n    this.setState((prev) => ({\n      id: prev.id + 1,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'alimentação',\n    }));\n  }\n\n  render() {\n    const { currenty } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <div>\n        <div className=\"walletContainer\">\n          <h3> WalletForm</h3>\n          <form className=\"walletIn\">\n            Valor:\n            <input\n              type=\"number\"\n              data-testid=\"value-input\"\n              onChange={ this.onForma }\n              name=\"value\"\n              value={ value }\n            />\n            <select\n              data-testid=\"currency-input\"\n              onChange={ this.onForma }\n              name=\"currency\"\n              value={ currency }\n            >\n              {!currenty ? <option>erro</option>\n                : currenty.map((element, key) => (\n                  <option key={ key }>{ element }</option>\n                ))}\n            </select>\n            Descrição:\n            <input\n              type=\"text\"\n              data-testid=\"description-input\"\n              onChange={ this.onForma }\n              name=\"description\"\n              value={ description }\n            />\n            <select\n              data-testid=\"method-input\"\n              onChange={ this.onForma }\n              name=\"method\"\n              value={ method }\n            >\n              <option>Dinheiro</option>\n              <option>Cartão de crédito</option>\n              <option>Cartão de débito</option>\n            </select>\n            <select\n              data-testid=\"tag-input\"\n              onChange={ this.onForma }\n              name=\"tag\"\n              value={ tag }\n            >\n              <option>Alimentação</option>\n              <option>Lazer</option>\n              <option>Trabalho</option>\n              <option>Transporte</option>\n              <option>Saúde</option>\n            </select>\n            <button type=\"button\" onClick={ this.Onsubmit }>Adicionar despesa</button>\n          </form>\n        </div>\n        <Table />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  tudo: state.wallet.loading,\n  expenses: state.wallet.expenses,\n  currenty: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrance1: () => dispatch(fetchCurrance()),\n  fetchCURrancE2: (state) => dispatch(fetchCURrance3(state)),\n});\n\nWalletForm.propTypes = {\n  fetchCurrance1: PropTypes.func.isRequired,\n  fetchCURrancE2: PropTypes.func.isRequired,\n  currenty: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\n","import React from 'react';\nimport Header from '../components/Header';\nimport WalletForm from '../components/WalletForm';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div className=\"wallet\">\n        {' '}\n        <Header />\n        {' '}\n        <WalletForm />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route path=\"/carteira\" component={ Wallet } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}